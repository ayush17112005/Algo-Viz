export const algorithms = [
  {
    title: "Bubble Sort",
    description: "Step-by-step simulation of Bubble Sort algorithm.",
    icon: "🔁",
    timeComplexity: "O(n²)",
    spaceComplexity: "O(1)",
    route: "/bubble",
  },
  {
    title: "Quick Sort",
    description: "Visualize partitioning and recursive sorting.",
    icon: "⚡",
    timeComplexity: "O(n log n) (avg), O(n²) (worst)",
    spaceComplexity: "O(log n)",
    route: "/quick",
  },
  {
    title: "Merge Sort",
    description: "Watch divide and conquer in action.",
    icon: "🔀",
    timeComplexity: "O(n log n)",
    spaceComplexity: "O(n)",
    route: "/merge",
  },
  {
    title: "Heap Sort",
    description: "Build and flatten the heap visually.",
    icon: "🏗️",
    timeComplexity: "O(n log n)",
    spaceComplexity: "O(1)",
    route: "/heap",
  },
  {
    title: "Selection Sort",
    description: "Understand how the smallest element is selected.",
    icon: "🎯",
    timeComplexity: "O(n²)",
    spaceComplexity: "O(1)",
    route: "/selection",
  },
  {
    title: "A* Algorithm",
    description: "Pathfinding using heuristics and cost.",
    icon: "🧭",
    timeComplexity: "O(E)",
    spaceComplexity: "O(V)",
    route: "/astar",
  },
  {
    title: "Dijkstra",
    description: "Shortest path calculation in weighted graphs.",
    icon: "📍",
    timeComplexity: "O((V + E) log V)",
    spaceComplexity: "O(V)",
    route: "/dijkstra",
  },
  {
    title: "DFS",
    description: "Explore deep into a graph recursively.",
    icon: "🌊",
    timeComplexity: "O(V + E)",
    spaceComplexity: "O(V)",
    route: "/dfs",
  },
  {
    title: "BFS",
    description: "Level-wise traversal in graphs.",
    icon: "📘",
    timeComplexity: "O(V + E)",
    spaceComplexity: "O(V)",
    route: "/bfs",
  },
  {
    title: "Topological Sort",
    description: "Sort tasks based on dependency order.",
    icon: "🧱",
    timeComplexity: "O(V + E)",
    spaceComplexity: "O(V)",
    route: "/topo",
  },
];
